{{/* FIXME: Remember to run 'go generate' after editing this file. */}}

{{- if not .IgnoreImports}}
package {{.PackageName}}

import (
	"context"
	"fmt"
	"sync"
	"time"

	"google.golang.org/grpc"
)
{{- end}}

// Node encapsulates the state of a node on which a remote procedure call
// can be made.
type Node struct {
	// Only assigned at creation.
	id   uint32
	self bool
	addr string
	conn *grpc.ClientConn

{{range $elm := .Services}}
{{if .Streaming}}
	{{.UnexportedMethodName}}Client {{.ServName}}_{{.MethodName}}Client
{{end}}
{{end}}

	sync.Mutex
	lastErr error
	latency time.Duration
}

func (n *Node) connect(opts ...grpc.DialOption) error {
  var err error
	n.conn, err = grpc.Dial(n.addr, opts...)
	if err != nil {
		return fmt.Errorf("dialing node failed: %v", err)
	}

  //TODO suspected bug: if a connect fails below, it returns, leaving the conn above connected, leaking something.
  //TODO fix client name to be clRegister

{{$serviceName := ""}}
{{range $elm := .Services}}
{{if .Streaming}}
{{if ne .ServName $serviceName}}
    client := New{{.ServName}}Client(n.conn)
{{$serviceName := .ServName}}
{{end}}
  	n.{{.UnexportedMethodName}}Client, err = client.{{.MethodName}}(context.Background())
  	if err != nil {
  		return fmt.Errorf("stream creation failed: %v", err)
  	}
{{end}}
{{end -}}
	return nil
}

func (n *Node) close() error {
  var err error
{{range $elm := .Services}}
{{if .Streaming}}
	_, err = n.{{.UnexportedMethodName}}Client.CloseAndRecv()
{{end}}
{{end}}
  err2 := n.conn.Close()
  if err != nil {
    return fmt.Errorf("stream close failed: %v", err)
  } else if err2 != nil {
    return fmt.Errorf("conn close failed: %v", err2)
  }
  return nil
}
