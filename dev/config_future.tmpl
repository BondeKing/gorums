
{{/* Remember to run 'make goldenanddev' after editing this file. */}}

{{- if not .IgnoreImports}}
package {{.PackageName}}

import "golang.org/x/net/context"

{{- end}}

{{range $elm := .Services}}

{{if .Future}}

// {{.MethodName}}Future is a reference to an asynchronous {{.MethodName}} quorum call invocation.
type {{.MethodName}}Future struct {
	reply *{{.TypeName}}
	err   error
	c     chan struct{}
}

// {{.MethodName}}Future asynchronously invokes a {{.MethodName}} quorum call
// on configuration c and returns a {{.MethodName}}Future which can be used to
// inspect the quorum call reply and error when available.
func (c *Configuration) {{.MethodName}}Future(ctx context.Context, args *{{.FQReqName}}) *{{.MethodName}}Future {
	f := new({{.MethodName}}Future)
	f.c = make(chan struct{}, 1)
	go func() {
		defer close(f.c)
		f.reply, f.err = c.mgr.{{.UnexportedMethodName}}(ctx, c, args)
	}()
	return f
}

// Get returns the reply and any error associated with the {{.MethodName}}Future.
// The method blocks until a reply or error is available.
func (f *{{.MethodName}}Future) Get() (*{{.TypeName}}, error) {
	<-f.c
	return f.reply, f.err
}

// Done reports if a reply and/or error is available for the {{.MethodName}}Future.
func (f *{{.MethodName}}Future) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

{{- end -}}
{{- end -}}
