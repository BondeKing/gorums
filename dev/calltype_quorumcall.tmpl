
{{/* Remember to run 'make goldenanddev' after editing this file. */}}

{{$pkgName := .PackageName}}

{{if not .IgnoreImports}}
package {{$pkgName}}

import (
	"fmt"
	"time"

	"golang.org/x/net/context"
	"golang.org/x/net/trace"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)
{{end}}

{{range $elm := .Services}}

{{if .QuorumCall}}

/* Methods on Configuration and the quorum call struct {{.MethodName}} */

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf. 
//(This file could maybe hold all types of structs for the different call semantics)

// {{.TypeName}} encapsulates the reply from a {{.MethodName}} quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type {{.TypeName}} struct {
	// the actual reply
	*{{.FQRespName}}
	NodeIDs []uint32
}

func (r {{.TypeName}}) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.{{.RespName}})
}

{{if .PerNodeArg}}

type {{.UnexportedMethodName}}Arg func(nodeID uint32) *{{.FQReqName}}

// {{.MethodName}} is invoked as a quorum call on each node in configuration c,
// with the argument returned by the provided perNode function and returns the
// result as a {{.TypeName}}. The perNode function returns a *{{.FQReqName}}
// object to be passed to the given nodeID.
func (c *Configuration) {{.MethodName}}(ctx context.Context, perNode func(nodeID uint32) *{{.FQReqName}}) (*{{.TypeName}}, error) {
	return c.{{.UnexportedMethodName}}(ctx, perNode)
}

{{else}}

type {{.UnexportedMethodName}}Arg *{{.FQReqName}}

// {{.MethodName}} is invoked as a quorum call on all nodes in configuration c,
// using the same argument arg, and returns the result as a {{.TypeName}}.
func (c *Configuration) {{.MethodName}}(ctx context.Context, arg *{{.FQReqName}}) (*{{.TypeName}}, error) {
	return c.{{.UnexportedMethodName}}(ctx, arg)
}

{{- end}}

/* Methods on Manager for quorum call method {{.MethodName}} */

type {{.UnexportedTypeName}} struct {
	nid   uint32
	reply *{{.FQRespName}}
	err   error
}

func (c *Configuration) {{.UnexportedMethodName}}(ctx context.Context, a {{.UnexportedMethodName}}Arg) (r *{{.TypeName}}, err error) {
	var ti traceInfo
	if c.mgr.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "{{.MethodName}}")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.{{.RespName}},
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan {{.UnexportedTypeName}}, c.n)

	if c.mgr.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: a}, false)
	}

	for _, n := range c.nodes {
{{- if .PerNodeArg}}
		go callGRPC{{.MethodName}}(ctx, n, a(n.id), replyChan)
{{else}}
		go callGRPC{{.MethodName}}(ctx, n, a, replyChan)
{{end -}}
	}

	var (
		replyValues = make([]*{{.FQRespName}}, 0, c.n)
		reply       = &{{.TypeName}}{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if c.mgr.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
{{- if .QFWithReq}}
			if reply.{{.RespName}}, quorum = c.qspec.{{.MethodName}}QF(a, replyValues); quorum {
{{else}}
			if reply.{{.RespName}}, quorum = c.qspec.{{.MethodName}}QF(replyValues); quorum {
{{end -}}
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPC{{.MethodName}}(ctx context.Context, node *Node, args *{{.FQReqName}}, replyChan chan<- {{.UnexportedTypeName}}) {
	reply := new({{.FQRespName}})
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/{{$pkgName}}.{{.ServName}}/{{.MethodName}}",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- {{.UnexportedTypeName}}{node.id, reply, err}
}

{{- end -}}
{{- end -}}
