{{/* Remember to run 'make dev' after editing this file. */}}

{{ $Pkg := .PackageName }}

{{if not .IgnoreImports}}
package {{ $Pkg }}

import (
	"time"

	"golang.org/x/net/context"
	"golang.org/x/net/trace"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)
{{end}}

{{range .Services}}

{{if .QuorumCall}}

/* Exported types and methods for quorum call method {{.MethodName}} */

{{if .PerNodeArg}}

// {{.MethodName}} is invoked as a quorum call on each node in configuration c,
// with the argument returned by the provided perNode function and returns the
// result. The perNode function takes a request arg and
// returns a {{.FQReqName}} object to be passed to the given nodeID.
// The perNode function should be thread-safe.
func (c *Configuration) {{.MethodName}}(ctx context.Context, a *{{.FQReqName}}, f func(*{{.FQReqName}}, *Node) *{{.FQReqName}}) (resp *{{.FQCustomRespName}}, err error) {
{{- else}}

// {{.MethodName}} is invoked as a quorum call on all nodes in configuration c,
// using the same argument arg, and returns the result.
func (c *Configuration) {{.MethodName}}(ctx context.Context, a *{{.FQCustomReqName}}) (resp *{{.FQCustomRespName}}, err error) {
{{- end}}
	{{- template "simple_trace" .}}

	{{template "callLoop" .}}

	var (
		replyValues = make([]*{{.FQRespName}}, 0, expected)
		errs []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}
			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
{{- if .QFWithReq}}
			if resp, quorum = c.qspec.{{.MethodName}}QF(a, replyValues); quorum {
{{else}}
			if resp, quorum = c.qspec.{{.MethodName}}QF(replyValues); quorum {
{{end -}}
				return resp, nil
			}
		case <-ctx.Done():
			return resp, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}
		}

		if len(errs)+len(replyValues) == expected {
			return resp, QuorumCallError{"incomplete call", len(replyValues), errs}
		}
	}
}

{{template "callGRPC" .}}

{{- end -}}
{{- end -}}
