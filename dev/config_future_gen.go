// DO NOT EDIT. Generated by 'gorums' plugin for protoc-gen-go
// Source file to edit is: config_future_tmpl

package dev

import "golang.org/x/net/context"

// ReadQCFutureFuture is a reference to an asynchronous ReadQCFuture quorum call invocation.
type ReadQCFutureFuture struct {
	reply *ReadQCFutureReply
	err   error
	c     chan struct{}
}

// ReadQCFutureFuture asynchronously invokes a ReadQCFuture quorum call
// on configuration c and returns a ReadQCFutureFuture which can be used to
// inspect the quorum call reply and error when available.
func (c *Configuration) ReadQCFutureFuture(ctx context.Context, args *ReadReq) *ReadQCFutureFuture {
	f := new(ReadQCFutureFuture)
	f.c = make(chan struct{}, 1)
	go func() {
		defer close(f.c)
		f.reply, f.err = c.mgr.readQCFuture(ctx, c, args)
	}()
	return f
}

// Get returns the reply and any error associated with the ReadQCFutureFuture.
// The method blocks until a reply or error is available.
func (f *ReadQCFutureFuture) Get() (*ReadQCFutureReply, error) {
	<-f.c
	return f.reply, f.err
}

// Done reports if a reply and/or error is available for the ReadQCFutureFuture.
func (f *ReadQCFutureFuture) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}
