// DO NOT EDIT. Generated by 'gorums' plugin for protoc-gen-go
// Source file to edit is: calltype_future_tmpl

package dev

import (
	"time"

	"golang.org/x/net/context"
	"golang.org/x/net/trace"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

/* Methods on Configuration and the asynchronous struct ReadFuture */

// ReadFuture is a reference to an asynchronous ReadFuture quorum call invocation.
type ReadFuture struct {
	// the actual reply
	*State
	NodeIDs []uint32
	err     error
	c       chan struct{}
}

// ReadFuture asynchronously invokes a ReadFuture quorum call
// on configuration c and returns a ReadFuture which can be used to
// inspect the quorum call reply and error when available.
func (c *Configuration) ReadFuture(ctx context.Context, args *ReadRequest) *ReadFuture {
	f := &ReadFuture{
		NodeIDs: make([]uint32, 0, c.n),
		c:       make(chan struct{}, 1),
	}
	go func() {
		defer close(f.c)
		f.State, f.err = c.mgr.readFuture(ctx, c, f, args)
	}()
	return f
}

// Get returns the reply and any error associated with the ReadFuture.
// The method blocks until a reply or error is available.
func (f *ReadFuture) Get() (*State, error) {
	<-f.c
	return f.State, f.err
}

// Done reports if a reply and/or error is available for the ReadFuture.
func (f *ReadFuture) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

/* Methods on Manager for asynchronous method ReadFuture */

type readFutureReply struct {
	nid   uint32
	reply *State
	err   error
}

func (m *Manager) readFuture(ctx context.Context, c *Configuration, f *ReadFuture, args *ReadRequest) (r *State, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "ReadFuture")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   f.NodeIDs,
				reply: f.State,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan readFutureReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCReadFuture(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*State, 0, c.n)
		reply       *State
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			f.NodeIDs = append(f.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply, quorum = c.qspec.ReadFutureQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCReadFuture(ctx context.Context, node *Node, args *ReadRequest, replyChan chan<- readFutureReply) {
	reply := new(State)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.Register/ReadFuture",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- readFutureReply{node.id, reply, err}
}

/* Methods on Configuration and the asynchronous struct WriteFuture */

// WriteFuture is a reference to an asynchronous WriteFuture quorum call invocation.
type WriteFuture struct {
	// the actual reply
	*WriteResponse
	NodeIDs []uint32
	err     error
	c       chan struct{}
}

// WriteFuture asynchronously invokes a WriteFuture quorum call
// on configuration c and returns a WriteFuture which can be used to
// inspect the quorum call reply and error when available.
func (c *Configuration) WriteFuture(ctx context.Context, args *State) *WriteFuture {
	f := &WriteFuture{
		NodeIDs: make([]uint32, 0, c.n),
		c:       make(chan struct{}, 1),
	}
	go func() {
		defer close(f.c)
		f.WriteResponse, f.err = c.mgr.writeFuture(ctx, c, f, args)
	}()
	return f
}

// Get returns the reply and any error associated with the WriteFuture.
// The method blocks until a reply or error is available.
func (f *WriteFuture) Get() (*WriteResponse, error) {
	<-f.c
	return f.WriteResponse, f.err
}

// Done reports if a reply and/or error is available for the WriteFuture.
func (f *WriteFuture) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

/* Methods on Manager for asynchronous method WriteFuture */

type writeFutureReply struct {
	nid   uint32
	reply *WriteResponse
	err   error
}

func (m *Manager) writeFuture(ctx context.Context, c *Configuration, f *WriteFuture, args *State) (r *WriteResponse, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "WriteFuture")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   f.NodeIDs,
				reply: f.WriteResponse,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan writeFutureReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCWriteFuture(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*WriteResponse, 0, c.n)
		reply       *WriteResponse
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			f.NodeIDs = append(f.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply, quorum = c.qspec.WriteFutureQF(args, replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCWriteFuture(ctx context.Context, node *Node, args *State, replyChan chan<- writeFutureReply) {
	reply := new(WriteResponse)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.Register/WriteFuture",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- writeFutureReply{node.id, reply, err}
}
