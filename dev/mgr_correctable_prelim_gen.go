// DO NOT EDIT. Generated by 'gorums' plugin for protoc-gen-go
// Source file to edit is: mgr_correctable_prelim_tmpl

package dev

import (
	"io"

	"golang.org/x/net/context"
)

type readTwoReply struct {
	nid   uint32
	reply *State
	err   error
}

func (m *Manager) readTwoCorrectablePrelim(ctx context.Context, c *Configuration, corr *ReadTwoCorrectablePrelim, args *ReadRequest) {
	replyChan := make(chan readTwoReply, c.n)

	for _, n := range c.nodes {
		go callGRPCReadTwoStream(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*State, 0, c.n*2)
		reply       = &ReadTwoReply{NodeIDs: make([]uint32, 0, c.n)}
		clevel      = LevelNotSet
		rlevel      int
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = appendIfNotPresent(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			replyValues = append(replyValues, r.reply)
			reply.State, rlevel, quorum = c.qspec.ReadTwoCorrectablePrelimQF(replyValues)

			if quorum {
				corr.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				corr.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			corr.set(reply, clevel, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}, true)
			return
		}

		if errCount == c.n { // Can't rely on reply count.
			corr.set(reply, clevel, QuorumCallError{"incomplete call", errCount, len(replyValues)}, true)
			return
		}
	}
}

func callGRPCReadTwoStream(ctx context.Context, node *Node, args *ReadRequest, replyChan chan<- readTwoReply) {
	x := NewRegisterClient(node.conn)
	y, err := x.ReadTwo(ctx, args)
	if err != nil {
		replyChan <- readTwoReply{node.id, nil, err}
		return
	}

	for {
		reply, err := y.Recv()
		if err == io.EOF {
			return
		}
		replyChan <- readTwoReply{node.id, reply, err}
		if err != nil {
			return
		}
	}
}
