
{{/* Remember to run 'make goldenanddev' after editing this file. */}}

{{$pkgName := .PackageName}}

{{if not .IgnoreImports}}
package {{$pkgName}}

import (
	"time"

	"golang.org/x/net/context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

{{end}}

{{range $elm := .Services}}

{{if .Correctable}}

type {{.UnexportedTypeName}}Correctable struct {
	nid   uint32
	reply *{{.FQRespName}}
	err   error
}

func (m *Manager) {{.UnexportedMethodName}}Correctable(ctx context.Context, c *Configuration, corr *{{.MethodName}}Correctable, args *{{.FQReqName}}) {
	replyChan := make(chan {{.UnexportedTypeName}}, c.n)

	for _, n := range c.nodes {
		go callGRPC{{.MethodName}}Correctable(ctx, n, args, replyChan)
	}

	var (
		replyValues     = make([]*{{.FQRespName}}, 0, c.n)
		reply           = &{{.TypeName}}{NodeIDs: make([]uint32, 0, c.n)}
		clevel      	= LevelNotSet
		rlevel      int
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			replyValues = append(replyValues, r.reply)
{{- if .QFWithReq}}
			reply.{{.RespName}}, rlevel, quorum = c.qspec.{{.MethodName}}CorrectableQF(args, replyValues)
{{else}}
			reply.{{.RespName}}, rlevel, quorum = c.qspec.{{.MethodName}}CorrectableQF(replyValues)
{{end}}
			if quorum {
				corr.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				corr.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			corr.set(reply, clevel, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}, true)
			return
		}

		if errCount+len(replyValues) == c.n {
			corr.set(reply, clevel, QuorumCallError{"incomplete call", errCount, len(replyValues)}, true)
			return
		}
	}
}

func callGRPC{{.MethodName}}Correctable(ctx context.Context, node *Node, args *{{.FQReqName}}, replyChan chan<- {{.UnexportedTypeName}}) {
	reply := new({{.FQRespName}})
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/{{$pkgName}}.{{.ServName}}/{{.MethodName}}",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- {{.UnexportedTypeName}}{node.id, reply, err}
}

{{- end -}}
{{- end -}}
