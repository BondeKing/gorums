{{/* Remember to run 'go generate' after editing this file. */}}
{{$pkgName := .PackageName}}
{{$srvName := .ServiceName}}
package {{$pkgName}}

import (
	"time"

	"golang.org/x/net/context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

{{range $elm := .Services}}

{{if .Streaming}}
func (m *Manager) {{.UnexportedMethodName}}(cid int, args *{{.ReqName}}) error {
	c, found := m.Configuration(cid)
	if !found {
		panic("execeptional: config not found")
	}

	for _, nid := range c.nodes {
		// TODO: Only send if node.ConnState() == grpc.Connected?
		go func(nodeID int) {
			stream := m.{{.UnexportedMethodName}}Clients[nodeID]
			if stream == nil {
				panic("execeptional: node client stream not found")
			}
			err := stream.Send(args)
			if err == nil {
				return
			}
			if m.logger != nil {
				m.logger.Printf("%d: {{.UnexportedMethodName}} stream send error: %v", nodeID, err)
			}
		}(nid)
	}

	return nil
}

{{else -}}

type {{.UnexportedTypeName}} struct {
	nid   int
	reply *{{.RespName}}
	err   error
}

func (m *Manager) {{.UnexportedMethodName}}(cid int, args *{{.ReqName}}) (*{{.TypeName}}, error) {
	c, found := m.Configuration(cid)
	if !found {
		panic("exceptional: config not found")
	}

	var (
		replyChan   = make(chan {{.UnexportedTypeName}}, c.Size())
		stopSignal  = make(chan struct{})
		replyValues = make([]*{{.RespName}}, 0, c.quorum)
		errCount    int
		quorum      bool
		reply       = &{{.TypeName}}{NodeIDs: make([]int, 0, c.quorum)}
		ctx, cancel = context.WithCancel(context.Background())
	)

	for _, nid := range c.nodes {
		node, found := m.Node(nid)
		if !found {
			panic("execptional: node not found")
		}
		go func() {
			reply := new({{.RespName}})
			ce := make(chan error, 1)
			start := time.Now()
			go func() {
				select {
				case ce <- grpc.Invoke(
					ctx,
					"/{{$pkgName}}.{{$srvName}}/{{.MethodName}}",
					args,
					reply,
					node.conn,
				):
				case <-stopSignal:
					return
				}
			}()
			select {
			case err := <-ce:
				switch grpc.Code(err) { // nil -> codes.OK
				case codes.OK, codes.Canceled:
					node.setLatency(time.Since(start))
				default:
					node.setLastErr(err)
				}
				replyChan <- {{.UnexportedTypeName}}{node.id, reply, err}
			case <-stopSignal:
				return
			}
		}()
	}

	defer close(stopSignal)
	defer cancel()

	for {

		select {
		case r := <-replyChan:
			if r.err != nil {
				errCount++
				goto terminationCheck
			}
			replyValues = append(replyValues, r.reply)
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if reply.Reply, quorum = m.{{.UnexportedMethodName}}qf(c, replyValues); quorum {
				return reply, nil
			}
		case <-time.After(c.timeout):
			return reply, TimeoutRPCError{c.timeout, errCount, len(replyValues)}
		}

	terminationCheck:
		if errCount+len(replyValues) == c.Size() {
			return reply, IncompleteRPCError{errCount, len(replyValues)}
		}

	}
}

{{- end -}}
{{- end -}}
