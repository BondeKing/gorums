// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	sync "sync"
)

type internalResponse struct {
	nid   uint32
	reply *Response
	err   error
}

type internalEmpty struct {
	nid   uint32
	reply *empty.Empty
	err   error
}

// FutureMyResponse is a future object for processing replies.
type FutureMyResponse struct {
	// the actual reply
	*MyResponse
	NodeIDs []uint32
	err     error
	c       chan struct{}
}

// Get returns the reply and any error associated with the called method.
// The method blocks until a reply or error is available.
func (f *FutureMyResponse) Get() (*MyResponse, error) {
	<-f.c
	return f.MyResponse, f.err
}

// Done reports if a reply and/or error is available for the called method.
func (f *FutureMyResponse) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

// FutureResponse is a future object for processing replies.
type FutureResponse struct {
	// the actual reply
	*Response
	NodeIDs []uint32
	err     error
	c       chan struct{}
}

// Get returns the reply and any error associated with the called method.
// The method blocks until a reply or error is available.
func (f *FutureResponse) Get() (*Response, error) {
	<-f.c
	return f.Response, f.err
}

// Done reports if a reply and/or error is available for the called method.
func (f *FutureResponse) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

// FutureEmpty is a future object for processing replies.
type FutureEmpty struct {
	// the actual reply
	*empty.Empty
	NodeIDs []uint32
	err     error
	c       chan struct{}
}

// Get returns the reply and any error associated with the called method.
// The method blocks until a reply or error is available.
func (f *FutureEmpty) Get() (*empty.Empty, error) {
	<-f.c
	return f.Empty, f.err
}

// Done reports if a reply and/or error is available for the called method.
func (f *FutureEmpty) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

// CorrectableResponse is a correctable object for processing replies.
type CorrectableResponse struct {
	mu sync.Mutex
	// the actual reply
	*MyResponse
	NodeIDs  []uint32
	level    int
	err      error
	done     bool
	watchers []*struct {
		level int
		ch    chan struct{}
	}
	donech chan struct{}
}

// CorrectableStreamResponse is a correctable object for processing replies.
type CorrectableStreamResponse struct {
	mu sync.Mutex
	// the actual reply
	*Response
	NodeIDs  []uint32
	level    int
	err      error
	done     bool
	watchers []*struct {
		level int
		ch    chan struct{}
	}
	donech chan struct{}
}
