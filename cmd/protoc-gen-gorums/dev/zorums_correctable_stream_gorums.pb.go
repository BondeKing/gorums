// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	context "context"
	trace "golang.org/x/net/trace"
	grpc "google.golang.org/grpc"
	io "io"
	time "time"
)

// ReadCorrectableStream asynchronously invokes a correctable quorum call on each node
// in configuration c and returns a CorrectableStreamReadResponse, which can be used
// to inspect any replies or errors when available.
// This method supports server-side preliminary replies (correctable stream).
func (c *Configuration) ReadCorrectableStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) *CorrectableStreamReadResponse {
	corr := &CorrectableStreamReadResponse{
		level:   LevelNotSet,
		NodeIDs: make([]uint32, 0, c.n),
		donech:  make(chan struct{}),
	}
	go c.readCorrectableStream(ctx, in, corr, opts...)
	return corr
}

// Get returns the reply, level and any error associated with the
// ReadCorrectableStream. The method does not block until a (possibly
// itermidiate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *CorrectableStreamReadResponse) Get() (*ReadResponse, int, error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.ReadResponse, c.level, c.err
}

// Done returns a channel that will be closed when the correctable ReadCorrectableStream
// quorum call is done. A call is considered done when the quorum function has
// signaled that a quorum of replies was received or the call returned an error.
func (c *CorrectableStreamReadResponse) Done() <-chan struct{} {
	return c.donech
}

// Watch returns a channel that will be closed when a reply or error at or above the
// specified level is available. If the call is done, the channel is closed
// regardless of the specified level.
func (c *CorrectableStreamReadResponse) Watch(level int) <-chan struct{} {
	ch := make(chan struct{})
	c.mu.Lock()
	defer c.mu.Unlock()
	if level < c.level {
		close(ch)
		return ch
	}
	c.watchers = append(c.watchers, &struct {
		level int
		ch    chan struct{}
	}{level, ch})
	return ch
}

func (c *CorrectableStreamReadResponse) set(reply *ReadResponse, level int, err error, done bool) {
	c.mu.Lock()
	defer c.mu.Unlock()
	if c.done {
		panic("set(...) called on a done correctable")
	}
	c.ReadResponse, c.level, c.err, c.done = reply, level, err, done
	if done {
		close(c.donech)
		for _, watcher := range c.watchers {
			if watcher != nil {
				close(watcher.ch)
			}
		}
		return
	}
	for i := range c.watchers {
		if c.watchers[i] != nil && c.watchers[i].level <= level {
			close(c.watchers[i].ch)
			c.watchers[i] = nil
		}
	}
}

func (c *Configuration) readCorrectableStream(ctx context.Context, in *ReadRequest, resp *CorrectableStreamReadResponse, opts ...grpc.CallOption) {
	var ti traceInfo
	if c.mgr.opts.trace {
		ti.Trace = trace.New("gorums."+c.tstring()+".Sent", "ReadCorrectableStream")
		defer ti.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = time.Until(deadline)
		}
		ti.LazyLog(&ti.firstLine, false)
		ti.LazyLog(&payload{sent: true, msg: in}, false)

		defer func() {
			ti.LazyLog(&qcresult{ids: resp.NodeIDs, reply: resp.ReadResponse, err: resp.err}, false)
			if resp.err != nil {
				ti.SetError()
			}
		}()
	}

	expected := c.n
	replyChan := make(chan internalReadResponse, expected)
	for _, n := range c.nodes {
		go n.ReadCorrectableStream(ctx, in, replyChan)
	}

	var (
		//TODO(meling) don't recall why we need n*2 reply slots?
		replyValues = make([]*ReadResponse, 0, c.n*2)
		clevel      = LevelNotSet
		reply       *ReadResponse
		rlevel      int
		errs        []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			resp.NodeIDs = appendIfNotPresent(resp.NodeIDs, r.nid)
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}

			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}

			replyValues = append(replyValues, r.reply)
			reply, rlevel, quorum = c.qspec.ReadCorrectableStreamQF(replyValues)
			if quorum {
				resp.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				resp.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			resp.set(reply, clevel, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}, true)
			return
		}
		if len(errs) == expected { // Can't rely on reply count.
			resp.set(reply, clevel, QuorumCallError{"incomplete call", len(replyValues), errs}, true)
			return
		}
	}
}

func (n *Node) ReadCorrectableStream(ctx context.Context, in *ReadRequest, replyChan chan<- internalReadResponse) {
	x := NewReaderServiceClient(n.conn)
	y, err := x.ReadCorrectableStream(ctx, in)
	if err != nil {
		replyChan <- internalReadResponse{n.id, nil, err}
		return
	}

	for {
		reply, err := y.Recv()
		if err == io.EOF {
			return
		}
		replyChan <- internalReadResponse{n.id, reply, err}
		if err != nil {
			return
		}
	}
}
