// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dev

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZorumsServiceClient is the client API for ZorumsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZorumsServiceClient interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall plain.
	QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall with per_node_arg option.
	QuorumCallPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall with qf_with_req option.
	QuorumCallQFWithRequestArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall with custom_return_type option.
	QuorumCallCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallCombo with all supported options.
	QuorumCallCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallEmpty for testing imported message type.
	QuorumCallEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallEmpty2 for testing imported message type.
	QuorumCallEmpty2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Multicast plain. Response type is not needed here.
	Multicast(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_MulticastClient, error)
	// MulticastPerNodeArg with per_node_arg option.
	// TODO(meling) currently this is not supported, but compiles as if
	// per_node_arg wasn't specified. Need to implement support.
	MulticastPerNodeArg(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_MulticastPerNodeArgClient, error)
	// Multicast2 is testing whether multiple streams work.
	Multicast2(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast2Client, error)
	// Multicast3 is testing imported message type.
	Multicast3(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast3Client, error)
	// Multicast4 is testing imported message type.
	Multicast4(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast4Client, error)
	// QuorumCallFuture plain.
	QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFuturePerNodeArg with per_node_arg option.
	QuorumCallFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallfutureQFWithRequestArg with qf_with_req option.
	QuorumCallfutureQFWithRequestArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureCustomReturnType with custom_return_type option.
	QuorumCallFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureCombo with all supported options.
	QuorumCallFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFuture2 plain; with same return type: Response.
	QuorumCallFuture2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureEmpty for testing imported message type.
	QuorumCallFutureEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// QuorumCallFutureEmpty2 for testing imported message type; with same return
	// type as QuorumCallFuture: Response.
	QuorumCallFutureEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	Correctable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CorrectableStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamClient, error)
}

type zorumsServiceClient struct {
	cc *grpc.ClientConn
}

func NewZorumsServiceClient(cc *grpc.ClientConn) ZorumsServiceClient {
	return &zorumsServiceClient{cc}
}

func (c *zorumsServiceClient) GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/GRPCCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallPerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallQFWithRequestArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallQFWithRequestArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallEmpty2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallEmpty2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Multicast(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_MulticastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[0], "/dev.ZorumsService/Multicast", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceMulticastClient{stream}
	return x, nil
}

type ZorumsService_MulticastClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceMulticastClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceMulticastClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zorumsServiceMulticastClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) MulticastPerNodeArg(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_MulticastPerNodeArgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[1], "/dev.ZorumsService/MulticastPerNodeArg", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceMulticastPerNodeArgClient{stream}
	return x, nil
}

type ZorumsService_MulticastPerNodeArgClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceMulticastPerNodeArgClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceMulticastPerNodeArgClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zorumsServiceMulticastPerNodeArgClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) Multicast2(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[2], "/dev.ZorumsService/Multicast2", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceMulticast2Client{stream}
	return x, nil
}

type ZorumsService_Multicast2Client interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceMulticast2Client struct {
	grpc.ClientStream
}

func (x *zorumsServiceMulticast2Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zorumsServiceMulticast2Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) Multicast3(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[3], "/dev.ZorumsService/Multicast3", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceMulticast3Client{stream}
	return x, nil
}

type ZorumsService_Multicast3Client interface {
	Send(*Request) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type zorumsServiceMulticast3Client struct {
	grpc.ClientStream
}

func (x *zorumsServiceMulticast3Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zorumsServiceMulticast3Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) Multicast4(ctx context.Context, opts ...grpc.CallOption) (ZorumsService_Multicast4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[4], "/dev.ZorumsService/Multicast4", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceMulticast4Client{stream}
	return x, nil
}

type ZorumsService_Multicast4Client interface {
	Send(*empty.Empty) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type zorumsServiceMulticast4Client struct {
	grpc.ClientStream
}

func (x *zorumsServiceMulticast4Client) Send(m *empty.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zorumsServiceMulticast4Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuturePerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallfutureQFWithRequestArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallfutureQFWithRequestArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFuture2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuture2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureEmpty2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Correctable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Correctable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[5], "/dev.ZorumsService/CorrectableStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZorumsServiceServer is the server API for ZorumsService service.
type ZorumsServiceServer interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(context.Context, *Request) (*Response, error)
	// QuorumCall plain.
	QuorumCall(context.Context, *Request) (*Response, error)
	// QuorumCall with per_node_arg option.
	QuorumCallPerNodeArg(context.Context, *Request) (*Response, error)
	// QuorumCall with qf_with_req option.
	QuorumCallQFWithRequestArg(context.Context, *Request) (*Response, error)
	// QuorumCall with custom_return_type option.
	QuorumCallCustomReturnType(context.Context, *Request) (*Response, error)
	// QuorumCallCombo with all supported options.
	QuorumCallCombo(context.Context, *Request) (*Response, error)
	// QuorumCallEmpty for testing imported message type.
	QuorumCallEmpty(context.Context, *empty.Empty) (*Response, error)
	// QuorumCallEmpty2 for testing imported message type.
	QuorumCallEmpty2(context.Context, *Request) (*empty.Empty, error)
	// Multicast plain. Response type is not needed here.
	Multicast(ZorumsService_MulticastServer) error
	// MulticastPerNodeArg with per_node_arg option.
	// TODO(meling) currently this is not supported, but compiles as if
	// per_node_arg wasn't specified. Need to implement support.
	MulticastPerNodeArg(ZorumsService_MulticastPerNodeArgServer) error
	// Multicast2 is testing whether multiple streams work.
	Multicast2(ZorumsService_Multicast2Server) error
	// Multicast3 is testing imported message type.
	Multicast3(ZorumsService_Multicast3Server) error
	// Multicast4 is testing imported message type.
	Multicast4(ZorumsService_Multicast4Server) error
	// QuorumCallFuture plain.
	QuorumCallFuture(context.Context, *Request) (*Response, error)
	// QuorumCallFuturePerNodeArg with per_node_arg option.
	QuorumCallFuturePerNodeArg(context.Context, *Request) (*Response, error)
	// QuorumCallfutureQFWithRequestArg with qf_with_req option.
	QuorumCallfutureQFWithRequestArg(context.Context, *Request) (*Response, error)
	// QuorumCallFutureCustomReturnType with custom_return_type option.
	QuorumCallFutureCustomReturnType(context.Context, *Request) (*Response, error)
	// QuorumCallFutureCombo with all supported options.
	QuorumCallFutureCombo(context.Context, *Request) (*Response, error)
	// QuorumCallFuture2 plain; with same return type: Response.
	QuorumCallFuture2(context.Context, *Request) (*Response, error)
	// QuorumCallFutureEmpty for testing imported message type.
	QuorumCallFutureEmpty(context.Context, *Request) (*empty.Empty, error)
	// QuorumCallFutureEmpty2 for testing imported message type; with same return
	// type as QuorumCallFuture: Response.
	QuorumCallFutureEmpty2(context.Context, *empty.Empty) (*Response, error)
	Correctable(context.Context, *Request) (*Response, error)
	CorrectableStream(*Request, ZorumsService_CorrectableStreamServer) error
}

// UnimplementedZorumsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZorumsServiceServer struct {
}

func (*UnimplementedZorumsServiceServer) GRPCCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCCall not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCall not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallPerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallQFWithRequestArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallQFWithRequestArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallEmpty(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallEmpty2(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast(ZorumsService_MulticastServer) error {
	return status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (*UnimplementedZorumsServiceServer) MulticastPerNodeArg(ZorumsService_MulticastPerNodeArgServer) error {
	return status.Errorf(codes.Unimplemented, "method MulticastPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast2(ZorumsService_Multicast2Server) error {
	return status.Errorf(codes.Unimplemented, "method Multicast2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast3(ZorumsService_Multicast3Server) error {
	return status.Errorf(codes.Unimplemented, "method Multicast3 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast4(ZorumsService_Multicast4Server) error {
	return status.Errorf(codes.Unimplemented, "method Multicast4 not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuture(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuture not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuturePerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuturePerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallfutureQFWithRequestArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallfutureQFWithRequestArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuture2(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuture2 not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureEmpty(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureEmpty2(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Correctable(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Correctable not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStream(*Request, ZorumsService_CorrectableStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStream not implemented")
}

func RegisterZorumsServiceServer(s *grpc.Server, srv ZorumsServiceServer) {
	s.RegisterService(&_ZorumsService_serviceDesc, srv)
}

func _ZorumsService_GRPCCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).GRPCCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/GRPCCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).GRPCCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallPerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallPerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallPerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallPerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallQFWithRequestArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallQFWithRequestArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallQFWithRequestArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallQFWithRequestArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallEmpty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallEmpty2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallEmpty2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallEmpty2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallEmpty2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Multicast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZorumsServiceServer).Multicast(&zorumsServiceMulticastServer{stream})
}

type ZorumsService_MulticastServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type zorumsServiceMulticastServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceMulticastServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zorumsServiceMulticastServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZorumsService_MulticastPerNodeArg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZorumsServiceServer).MulticastPerNodeArg(&zorumsServiceMulticastPerNodeArgServer{stream})
}

type ZorumsService_MulticastPerNodeArgServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type zorumsServiceMulticastPerNodeArgServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceMulticastPerNodeArgServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zorumsServiceMulticastPerNodeArgServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZorumsService_Multicast2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZorumsServiceServer).Multicast2(&zorumsServiceMulticast2Server{stream})
}

type ZorumsService_Multicast2Server interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type zorumsServiceMulticast2Server struct {
	grpc.ServerStream
}

func (x *zorumsServiceMulticast2Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zorumsServiceMulticast2Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZorumsService_Multicast3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZorumsServiceServer).Multicast3(&zorumsServiceMulticast3Server{stream})
}

type ZorumsService_Multicast3Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type zorumsServiceMulticast3Server struct {
	grpc.ServerStream
}

func (x *zorumsServiceMulticast3Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zorumsServiceMulticast3Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZorumsService_Multicast4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZorumsServiceServer).Multicast4(&zorumsServiceMulticast4Server{stream})
}

type ZorumsService_Multicast4Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*empty.Empty, error)
	grpc.ServerStream
}

type zorumsServiceMulticast4Server struct {
	grpc.ServerStream
}

func (x *zorumsServiceMulticast4Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zorumsServiceMulticast4Server) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZorumsService_QuorumCallFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuture(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFuturePerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuturePerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuturePerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuturePerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallfutureQFWithRequestArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallfutureQFWithRequestArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallfutureQFWithRequestArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallfutureQFWithRequestArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFuture2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuture2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuture2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuture2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureEmpty2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureEmpty2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty2(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Correctable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Correctable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Correctable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Correctable(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStream(m, &zorumsServiceCorrectableStreamServer{stream})
}

type ZorumsService_CorrectableStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _ZorumsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.ZorumsService",
	HandlerType: (*ZorumsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCCall",
			Handler:    _ZorumsService_GRPCCall_Handler,
		},
		{
			MethodName: "QuorumCall",
			Handler:    _ZorumsService_QuorumCall_Handler,
		},
		{
			MethodName: "QuorumCallPerNodeArg",
			Handler:    _ZorumsService_QuorumCallPerNodeArg_Handler,
		},
		{
			MethodName: "QuorumCallQFWithRequestArg",
			Handler:    _ZorumsService_QuorumCallQFWithRequestArg_Handler,
		},
		{
			MethodName: "QuorumCallCustomReturnType",
			Handler:    _ZorumsService_QuorumCallCustomReturnType_Handler,
		},
		{
			MethodName: "QuorumCallCombo",
			Handler:    _ZorumsService_QuorumCallCombo_Handler,
		},
		{
			MethodName: "QuorumCallEmpty",
			Handler:    _ZorumsService_QuorumCallEmpty_Handler,
		},
		{
			MethodName: "QuorumCallEmpty2",
			Handler:    _ZorumsService_QuorumCallEmpty2_Handler,
		},
		{
			MethodName: "QuorumCallFuture",
			Handler:    _ZorumsService_QuorumCallFuture_Handler,
		},
		{
			MethodName: "QuorumCallFuturePerNodeArg",
			Handler:    _ZorumsService_QuorumCallFuturePerNodeArg_Handler,
		},
		{
			MethodName: "QuorumCallfutureQFWithRequestArg",
			Handler:    _ZorumsService_QuorumCallfutureQFWithRequestArg_Handler,
		},
		{
			MethodName: "QuorumCallFutureCustomReturnType",
			Handler:    _ZorumsService_QuorumCallFutureCustomReturnType_Handler,
		},
		{
			MethodName: "QuorumCallFutureCombo",
			Handler:    _ZorumsService_QuorumCallFutureCombo_Handler,
		},
		{
			MethodName: "QuorumCallFuture2",
			Handler:    _ZorumsService_QuorumCallFuture2_Handler,
		},
		{
			MethodName: "QuorumCallFutureEmpty",
			Handler:    _ZorumsService_QuorumCallFutureEmpty_Handler,
		},
		{
			MethodName: "QuorumCallFutureEmpty2",
			Handler:    _ZorumsService_QuorumCallFutureEmpty2_Handler,
		},
		{
			MethodName: "Correctable",
			Handler:    _ZorumsService_Correctable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multicast",
			Handler:       _ZorumsService_Multicast_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MulticastPerNodeArg",
			Handler:       _ZorumsService_MulticastPerNodeArg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Multicast2",
			Handler:       _ZorumsService_Multicast2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Multicast3",
			Handler:       _ZorumsService_Multicast3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Multicast4",
			Handler:       _ZorumsService_Multicast4_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CorrectableStream",
			Handler:       _ZorumsService_CorrectableStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zorums.proto",
}
