syntax = "proto3";

package quorumcall;

// option go_package =
// "github.com/relab/gorums/cmd/protoc-gen-gorums/tests/quorumcall";
option go_package = "cmd/protoc-gen-gorums/dev";

// import "github.com/relab/gorums/gorums.proto";
import "gorums.proto";

service Storage {
  // Read is a synchronous quorum call that returns a single State object
  // once a quorum of replies have been received. The returned State object
  // is computed by the quorum function.
  rpc Read(ReadRequest) returns (State) {
    option (gorums.qc) = true;
    option (gorums.qf_with_req) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyState";
  }
  rpc Write(ReadRequest) returns (State) {
    option (gorums.qc) = true;
    option (gorums.custom_return_type) = "MyState";
  }
  rpc McastWrite(stream ReadRequest) returns (State) {
    option (gorums.multicast) = true;
  }
}

message ReadRequest {}

message State {
  string Value = 1;
  int64 Timestamp = 2;
}

message MyState {
  string Value = 1;
  int64 Timestamp = 2;
  int64 Extra = 3;
}
