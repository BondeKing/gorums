// Code generated by protoc-gen-gogo.
// source: testdata/gorums_rpc_golden/gorums_rpc.proto
// DO NOT EDIT!

/*
Package dev is a generated protocol buffer package.

It is generated from these files:
	testdata/gorums_rpc_golden/gorums_rpc.proto

It has these top-level messages:
	Reply
	WriteResp
	ReadReq
	Nothing
*/
package dev

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/relab/gorums"

import (
	"bytes"
	"encoding/binary"
	"hash/fnv"
	"log"
	"net"
	"sort"
	"sync"
	"time"

	"golang.org/x/net/trace"

	"google.golang.org/grpc/codes"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Reply struct {
	Value     string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptorGorumsRpc, []int{0} }

type WriteResp struct {
	New bool `protobuf:"varint,1,opt,name=New,proto3" json:"New,omitempty"`
}

func (m *WriteResp) Reset()                    { *m = WriteResp{} }
func (*WriteResp) ProtoMessage()               {}
func (*WriteResp) Descriptor() ([]byte, []int) { return fileDescriptorGorumsRpc, []int{1} }

type ReadReq struct {
}

func (m *ReadReq) Reset()                    { *m = ReadReq{} }
func (*ReadReq) ProtoMessage()               {}
func (*ReadReq) Descriptor() ([]byte, []int) { return fileDescriptorGorumsRpc, []int{2} }

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptorGorumsRpc, []int{3} }

func init() {
	proto.RegisterType((*Reply)(nil), "dev.Reply")
	proto.RegisterType((*WriteResp)(nil), "dev.WriteResp")
	proto.RegisterType((*ReadReq)(nil), "dev.ReadReq")
	proto.RegisterType((*Nothing)(nil), "dev.Nothing")
}
func (this *Reply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Reply)
	if !ok {
		that2, ok := that.(Reply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Reply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Reply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Reply but is not nil && this == nil")
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	return nil
}
func (this *Reply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Reply)
	if !ok {
		that2, ok := that.(Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *WriteResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WriteResp)
	if !ok {
		that2, ok := that.(WriteResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WriteResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WriteResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WriteResp but is not nil && this == nil")
	}
	if this.New != that1.New {
		return fmt.Errorf("New this(%v) Not Equal that(%v)", this.New, that1.New)
	}
	return nil
}
func (this *WriteResp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WriteResp)
	if !ok {
		that2, ok := that.(WriteResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.New != that1.New {
		return false
	}
	return true
}
func (this *ReadReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReadReq)
	if !ok {
		that2, ok := that.(ReadReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ReadReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReadReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReadReq but is not nil && this == nil")
	}
	return nil
}
func (this *ReadReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReadReq)
	if !ok {
		that2, ok := that.(ReadReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Nothing) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Nothing)
	if !ok {
		that2, ok := that.(Nothing)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Nothing")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Nothing but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Nothing but is not nil && this == nil")
	}
	return nil
}
func (this *Nothing) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Nothing)
	if !ok {
		that2, ok := that.(Nothing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}

//  Reference Gorums specific imports to suppress errors if they are not otherwise used.
var _ = codes.OK

/* 'gorums' plugin for protoc-gen-go - generated from: calltype_correctable_tmpl */

/* Methods on Configuration and the correctable struct ReadCorrectable */

// ReadCorrectable is a reference to a correctable ReadCorrectable quorum call.
type ReadCorrectable struct {
	sync.Mutex
	reply    *ReadCorrectableReply
	level    int
	err      error
	done     bool
	watchers []*struct {
		level int
		ch    chan struct{}
	}
	donech chan struct{}
}

// ReadCorrectable asynchronously invokes a
// correctable ReadCorrectable quorum call on configuration c and returns a
// ReadCorrectable which can be used to inspect any replies or errors
// when available.
func (c *Configuration) ReadCorrectable(ctx context.Context, args *ReadReq) *ReadCorrectable {
	corr := &ReadCorrectable{
		level:  LevelNotSet,
		donech: make(chan struct{}),
	}
	go func() {
		c.mgr.readCorrectable(ctx, c, corr, args)
	}()
	return corr
}

// Get returns the reply, level and any error associated with the
// ReadCorrectable. The method does not block until a (possibly
// itermidiate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *ReadCorrectable) Get() (*ReadCorrectableReply, int, error) {
	c.Lock()
	defer c.Unlock()
	return c.reply, c.level, c.err
}

// Done returns a channel that's closed when the correctable ReadCorrectable
// quorum call is done. A call is considered done when the quorum function has
// signaled that a quorum of replies was received or that the call returned an
// error.
func (c *ReadCorrectable) Done() <-chan struct{} {
	return c.donech
}

// Watch returns a channel that's closed when a reply or error at or above the
// specified level is available. If the call is done, the channel is closed
// disregardless of the specified level.
func (c *ReadCorrectable) Watch(level int) <-chan struct{} {
	ch := make(chan struct{})
	c.Lock()
	if level < c.level {
		close(ch)
		c.Unlock()
		return ch
	}
	c.watchers = append(c.watchers, &struct {
		level int
		ch    chan struct{}
	}{level, ch})
	c.Unlock()
	return ch
}

func (c *ReadCorrectable) set(reply *ReadCorrectableReply, level int, err error, done bool) {
	c.Lock()
	if c.done {
		c.Unlock()
		panic("set(...) called on a done correctable")
	}
	c.reply, c.level, c.err, c.done = reply, level, err, done
	if done {
		close(c.donech)
		for _, watcher := range c.watchers {
			if watcher != nil {
				close(watcher.ch)
			}
		}
		c.Unlock()
		return
	}
	for i := range c.watchers {
		if c.watchers[i] != nil && c.watchers[i].level <= level {
			close(c.watchers[i].ch)
			c.watchers[i] = nil
		}
	}
	c.Unlock()
}

/* Methods on Manager for correctable method ReadCorrectable */

type readCorrectableReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) readCorrectable(ctx context.Context, c *Configuration, corr *ReadCorrectable, args *ReadReq) {
	replyChan := make(chan readCorrectableReply, c.n)

	for _, n := range c.nodes {
		go callGRPCReadCorrectable(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n)
		reply       = &ReadCorrectableReply{NodeIDs: make([]uint32, 0, c.n)}
		clevel      = LevelNotSet
		rlevel      int
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			replyValues = append(replyValues, r.reply)
			reply.Reply, rlevel, quorum = c.qspec.ReadCorrectableQF(replyValues)

			if quorum {
				corr.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				corr.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			corr.set(reply, clevel, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}, true)
			return
		}

		if errCount+len(replyValues) == c.n {
			corr.set(reply, clevel, QuorumCallError{"incomplete call", errCount, len(replyValues)}, true)
			return
		}
	}
}

func callGRPCReadCorrectable(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- readCorrectableReply) {
	reply := new(Reply)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/ReadCorrectable",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- readCorrectableReply{node.id, reply, err}
}

/* 'gorums' plugin for protoc-gen-go - generated from: config_correctable_prelim_tmpl */

// ReadCorrectablePrelim is a reference to a correctable quorum call
// with server side preliminary reply support.
type ReadCorrectablePrelim struct {
	sync.Mutex
	reply    *ReadCorrectablePrelimReply
	level    int
	err      error
	done     bool
	watchers []*struct {
		level int
		ch    chan struct{}
	}
	donech chan struct{}
}

// ReadCorrectablePrelim asynchronously invokes a correctable ReadCorrectablePrelim quorum call
// with server side preliminary reply support on configuration c and returns a
// ReadCorrectablePrelim which can be used to inspect any replies or errors
// when available.
func (c *Configuration) ReadCorrectablePrelim(ctx context.Context, args *ReadReq) *ReadCorrectablePrelim {
	corr := &ReadCorrectablePrelim{
		level:  LevelNotSet,
		donech: make(chan struct{}),
	}
	go func() {
		c.mgr.readCorrectablePrelimCorrectablePrelim(ctx, c, corr, args)
	}()
	return corr
}

// Get returns the reply, level and any error associated with the
// ReadCorrectablePrelimCorrectablePremlim. The method does not block until a (possibly
// itermidiate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *ReadCorrectablePrelim) Get() (*ReadCorrectablePrelimReply, int, error) {
	c.Lock()
	defer c.Unlock()
	return c.reply, c.level, c.err
}

// Done returns a channel that's closed when the correctable ReadCorrectablePrelim
// quorum call is done. A call is considered done when the quorum function has
// signaled that a quorum of replies was received or that the call returned an
// error.
func (c *ReadCorrectablePrelim) Done() <-chan struct{} {
	return c.donech
}

// Watch returns a channel that's closed when a reply or error at or above the
// specified level is available. If the call is done, the channel is closed
// disregardless of the specified level.
func (c *ReadCorrectablePrelim) Watch(level int) <-chan struct{} {
	ch := make(chan struct{})
	c.Lock()
	if level < c.level {
		close(ch)
		c.Unlock()
		return ch
	}
	c.watchers = append(c.watchers, &struct {
		level int
		ch    chan struct{}
	}{level, ch})
	c.Unlock()
	return ch
}

func (c *ReadCorrectablePrelim) set(reply *ReadCorrectablePrelimReply, level int, err error, done bool) {
	c.Lock()
	if c.done {
		c.Unlock()
		panic("set(...) called on a done correctable")
	}
	c.reply, c.level, c.err, c.done = reply, level, err, done
	if done {
		close(c.donech)
		for _, watcher := range c.watchers {
			if watcher != nil {
				close(watcher.ch)
			}
		}
		c.Unlock()
		return
	}
	for i := range c.watchers {
		if c.watchers[i] != nil && c.watchers[i].level <= level {
			close(c.watchers[i].ch)
			c.watchers[i] = nil
		}
	}
	c.Unlock()
}

/* 'gorums' plugin for protoc-gen-go - generated from: config_future_tmpl */

// ReadQCFutureFuture is a reference to an asynchronous ReadQCFuture quorum call invocation.
type ReadQCFutureFuture struct {
	reply *ReadQCFutureReply
	err   error
	c     chan struct{}
}

// ReadQCFutureFuture asynchronously invokes a ReadQCFuture quorum call
// on configuration c and returns a ReadQCFutureFuture which can be used to
// inspect the quorum call reply and error when available.
func (c *Configuration) ReadQCFutureFuture(ctx context.Context, args *ReadReq) *ReadQCFutureFuture {
	f := new(ReadQCFutureFuture)
	f.c = make(chan struct{}, 1)
	go func() {
		defer close(f.c)
		f.reply, f.err = c.mgr.readQCFuture(ctx, c, args)
	}()
	return f
}

// Get returns the reply and any error associated with the ReadQCFutureFuture.
// The method blocks until a reply or error is available.
func (f *ReadQCFutureFuture) Get() (*ReadQCFutureReply, error) {
	<-f.c
	return f.reply, f.err
}

// Done reports if a reply and/or error is available for the ReadQCFutureFuture.
func (f *ReadQCFutureFuture) Done() bool {
	select {
	case <-f.c:
		return true
	default:
		return false
	}
}

/* 'gorums' plugin for protoc-gen-go - generated from: config_multicast_tmpl */

// WriteMulticast is a one-way multicast operation, where args is sent to
// every node in configuration c. The call is asynchronous and has no response
// return value.
func (c *Configuration) WriteMulticast(ctx context.Context, args *Reply) error {
	return c.mgr.writeMulticast(ctx, c, args)
}

/* 'gorums' plugin for protoc-gen-go - generated from: config_quorumcall_tmpl */

// GorumsQCReadQC invokes a GorumsQCReadQC quorum call on configuration c
// and returns the result as a GorumsQCReadQCReply.
func (c *Configuration) GorumsQCReadQC(ctx context.Context, args *ReadReq) (*GorumsQCReadQCReply, error) {
	return c.mgr.gorumsQCReadQC(ctx, c, args)
}

// GorumsRPCReadQC invokes a GorumsRPCReadQC quorum call on configuration c
// and returns the result as a GorumsRPCReadQCReply.
func (c *Configuration) GorumsRPCReadQC(ctx context.Context, args *ReadReq) (*GorumsRPCReadQCReply, error) {
	return c.mgr.gorumsRPCReadQC(ctx, c, args)
}

// ReadQCCustomReturn invokes a ReadQCCustomReturn quorum call on configuration c
// and returns the result as a ReadQCCustomReturnReply.
func (c *Configuration) ReadQCCustomReturn(ctx context.Context, args *ReadReq) (*ReadQCCustomReturnReply, error) {
	return c.mgr.readQCCustomReturn(ctx, c, args)
}

// WriteQCPerNode invokes the WriteQCPerNode on each node in configuration c,
// with the argument returned by the provided perNodeArg function
// and returns the result as a WriteQCPerNodeReply.
func (c *Configuration) WriteQCPerNode(ctx context.Context, perNodeArg func(nodeID uint32) *Reply) (*WriteQCPerNodeReply, error) {
	return c.mgr.writeQCPerNode(ctx, c, perNodeArg)
}

// WriteQCWithReq invokes a WriteQCWithReq quorum call on configuration c
// and returns the result as a WriteQCWithReqReply.
func (c *Configuration) WriteQCWithReq(ctx context.Context, args *Reply) (*WriteQCWithReqReply, error) {
	return c.mgr.writeQCWithReq(ctx, c, args)
}

/* 'gorums' plugin for protoc-gen-go - generated from: config_shared_struct_tmpl */

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// GorumsQCReadQCReply encapsulates the reply from a correctable GorumsQCReadQC quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type GorumsQCReadQCReply struct {
	NodeIDs []uint32
	*Reply
}

func (r GorumsQCReadQCReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// GorumsRPCReadQCReply encapsulates the reply from a correctable GorumsRPCReadQC quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type GorumsRPCReadQCReply struct {
	NodeIDs []uint32
	*Reply
}

func (r GorumsRPCReadQCReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// ReadCorrectableReply encapsulates the reply from a correctable ReadCorrectable quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type ReadCorrectableReply struct {
	NodeIDs []uint32
	*Reply
}

func (r ReadCorrectableReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// ReadCorrectablePrelimReply encapsulates the reply from a correctable ReadCorrectablePrelim quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type ReadCorrectablePrelimReply struct {
	NodeIDs []uint32
	*Reply
}

func (r ReadCorrectablePrelimReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// ReadQCCustomReturnReply encapsulates the reply from a correctable ReadQCCustomReturn quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type ReadQCCustomReturnReply struct {
	NodeIDs []uint32
	*Reply
}

func (r ReadQCCustomReturnReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// ReadQCFutureReply encapsulates the reply from a correctable ReadQCFuture quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type ReadQCFutureReply struct {
	NodeIDs []uint32
	*Reply
}

func (r ReadQCFutureReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.Reply)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// WriteQCPerNodeReply encapsulates the reply from a correctable WriteQCPerNode quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type WriteQCPerNodeReply struct {
	NodeIDs []uint32
	*WriteResp
}

func (r WriteQCPerNodeReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.WriteResp)
}

//TODO Make this a customizable struct that replaces FQRespName together with typedecl option in gogoprotobuf.
//(This file could maybe hold all types of structs for the different call semantics)

// WriteQCWithReqReply encapsulates the reply from a correctable WriteQCWithReq quorum call.
// It contains the id of each node of the quorum that replied and a single reply.
type WriteQCWithReqReply struct {
	NodeIDs []uint32
	*WriteResp
}

func (r WriteQCWithReqReply) String() string {
	return fmt.Sprintf("node ids: %v | answer: %v", r.NodeIDs, r.WriteResp)
}

/* 'gorums' plugin for protoc-gen-go - generated from: mgr_correctable_prelim_tmpl */

type readCorrectablePrelimReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) readCorrectablePrelimCorrectablePrelim(ctx context.Context, c *Configuration, corr *ReadCorrectablePrelimCorrectablePrelim, args *ReadReq) {
	replyChan := make(chan readCorrectablePrelimReply, c.n)

	for _, n := range c.nodes {
		go callGRPCReadCorrectablePrelimStream(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n*2)
		reply       = &ReadCorrectablePrelimReply{NodeIDs: make([]uint32, 0, c.n)}
		clevel      = LevelNotSet
		rlevel      int
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = appendIfNotPresent(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			replyValues = append(replyValues, r.reply)
			reply.Reply, rlevel, quorum = c.qspec.ReadCorrectablePrelimCorrectablePrelimQF(replyValues)

			if quorum {
				corr.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				corr.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			corr.set(reply, clevel, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}, true)
			return
		}

		if errCount == c.n { // Can't rely on reply count.
			corr.set(reply, clevel, QuorumCallError{"incomplete call", errCount, len(replyValues)}, true)
			return
		}
	}
}

func callGRPCReadCorrectablePrelimStream(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- readCorrectablePrelimReply) {
	x := NewGorumsRPCClient(node.conn)
	y, err := x.ReadCorrectablePrelim(ctx, args)
	if err != nil {
		replyChan <- readCorrectablePrelimReply{node.id, nil, err}
		return
	}

	for {
		reply, err := y.Recv()
		if err == io.EOF {
			return
		}
		replyChan <- readCorrectablePrelimReply{node.id, reply, err}
		if err != nil {
			return
		}
	}
}

/* 'gorums' plugin for protoc-gen-go - generated from: mgr_multicast_tmpl */

func (m *Manager) writeMulticast(ctx context.Context, c *Configuration, args *Reply) error {
	for _, node := range c.nodes {
		go func(n *Node) {
			err := n.WriteMulticastClient.Send(args)
			if err == nil {
				return
			}
			if m.logger != nil {
				m.logger.Printf("%d: writeMulticast stream send error: %v", n.id, err)
			}
		}(node)
	}

	return nil
}

/* 'gorums' plugin for protoc-gen-go - generated from: mgr_quorumcall_tmpl */

type gorumsQCReadQCReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) gorumsQCReadQC(ctx context.Context, c *Configuration, args *ReadReq) (r *GorumsQCReadQCReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "GorumsQCReadQC")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.Reply,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan gorumsQCReadQCReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCGorumsQCReadQC(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n)
		reply       = &GorumsQCReadQCReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.Reply, quorum = c.qspec.GorumsQCReadQCQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCGorumsQCReadQC(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- gorumsQCReadQCReply) {
	reply := new(Reply)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsQC/GorumsQCReadQC",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- gorumsQCReadQCReply{node.id, reply, err}
}

type gorumsRPCReadQCReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) gorumsRPCReadQC(ctx context.Context, c *Configuration, args *ReadReq) (r *GorumsRPCReadQCReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "GorumsRPCReadQC")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.Reply,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan gorumsRPCReadQCReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCGorumsRPCReadQC(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n)
		reply       = &GorumsRPCReadQCReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.Reply, quorum = c.qspec.GorumsRPCReadQCQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCGorumsRPCReadQC(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- gorumsRPCReadQCReply) {
	reply := new(Reply)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/GorumsRPCReadQC",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- gorumsRPCReadQCReply{node.id, reply, err}
}

type readQCCustomReturnReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) readQCCustomReturn(ctx context.Context, c *Configuration, args *ReadReq) (r *ReadQCCustomReturnReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "ReadQCCustomReturn")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.Reply,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan readQCCustomReturnReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCReadQCCustomReturn(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n)
		reply       = &ReadQCCustomReturnReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.Reply, quorum = c.qspec.ReadQCCustomReturnQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCReadQCCustomReturn(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- readQCCustomReturnReply) {
	reply := new(Reply)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/ReadQCCustomReturn",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- readQCCustomReturnReply{node.id, reply, err}
}

type readQCFutureReply struct {
	nid   uint32
	reply *Reply
	err   error
}

func (m *Manager) readQCFuture(ctx context.Context, c *Configuration, args *ReadReq) (r *ReadQCFutureReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "ReadQCFuture")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.Reply,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan readQCFutureReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCReadQCFuture(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*Reply, 0, c.n)
		reply       = &ReadQCFutureReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.Reply, quorum = c.qspec.ReadQCFutureQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCReadQCFuture(ctx context.Context, node *Node, args *ReadReq, replyChan chan<- readQCFutureReply) {
	reply := new(Reply)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/ReadQCFuture",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- readQCFutureReply{node.id, reply, err}
}

type writeQCPerNodeReply struct {
	nid   uint32
	reply *WriteResp
	err   error
}

func (m *Manager) writeQCPerNode(ctx context.Context, c *Configuration, perNodeArg func(nodeID uint32) *Reply) (r *WriteQCPerNodeReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "WriteQCPerNode")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.WriteResp,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan writeQCPerNodeReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: perNodeArg}, false)
	}

	for _, n := range c.nodes {
		go callGRPCWriteQCPerNode(ctx, n, perNodeArg(n.id), replyChan)
	}

	var (
		replyValues = make([]*WriteResp, 0, c.n)
		reply       = &WriteQCPerNodeReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.WriteResp, quorum = c.qspec.WriteQCPerNodeQF(replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCWriteQCPerNode(ctx context.Context, node *Node, args *Reply, replyChan chan<- writeQCPerNodeReply) {
	reply := new(WriteResp)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/WriteQCPerNode",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- writeQCPerNodeReply{node.id, reply, err}
}

type writeQCWithReqReply struct {
	nid   uint32
	reply *WriteResp
	err   error
}

func (m *Manager) writeQCWithReq(ctx context.Context, c *Configuration, args *Reply) (r *WriteQCWithReqReply, err error) {
	var ti traceInfo
	if m.opts.trace {
		ti.tr = trace.New("gorums."+c.tstring()+".Sent", "WriteQCWithReq")
		defer ti.tr.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = deadline.Sub(time.Now())
		}
		ti.tr.LazyLog(&ti.firstLine, false)

		defer func() {
			ti.tr.LazyLog(&qcresult{
				ids:   r.NodeIDs,
				reply: r.WriteResp,
				err:   err,
			}, false)
			if err != nil {
				ti.tr.SetError()
			}
		}()
	}

	replyChan := make(chan writeQCWithReqReply, c.n)

	if m.opts.trace {
		ti.tr.LazyLog(&payload{sent: true, msg: args}, false)
	}

	for _, n := range c.nodes {
		go callGRPCWriteQCWithReq(ctx, n, args, replyChan)
	}

	var (
		replyValues = make([]*WriteResp, 0, c.n)
		reply       = &WriteQCWithReqReply{NodeIDs: make([]uint32, 0, c.n)}
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			reply.NodeIDs = append(reply.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if m.opts.trace {
				ti.tr.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if reply.WriteResp, quorum = c.qspec.WriteQCWithReqQF(args, replyValues); quorum {
				return reply, nil
			}
		case <-ctx.Done():
			return reply, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}
		}

		if errCount+len(replyValues) == c.n {
			return reply, QuorumCallError{"incomplete call", errCount, len(replyValues)}
		}
	}
}

func callGRPCWriteQCWithReq(ctx context.Context, node *Node, args *Reply, replyChan chan<- writeQCWithReqReply) {
	reply := new(WriteResp)
	start := time.Now()
	err := grpc.Invoke(
		ctx,
		"/dev.GorumsRPC/WriteQCWithReq",
		args,
		reply,
		node.conn,
	)
	switch grpc.Code(err) { // nil -> codes.OK
	case codes.OK, codes.Canceled:
		node.setLatency(time.Since(start))
	default:
		node.setLastErr(err)
	}
	replyChan <- writeQCWithReqReply{node.id, reply, err}
}

/* 'gorums' plugin for protoc-gen-go - generated from: node_tmpl */

// Node encapsulates the state of a node on which a remote procedure call
// can be made.
type Node struct {
	// Only assigned at creation.
	id   uint32
	self bool
	addr string
	conn *grpc.ClientConn

	GorumsQCClient GorumsQCClient

	GorumsRPCClient GorumsRPCClient

	WriteMulticastClient GorumsRPC_WriteMulticastClient

	sync.Mutex
	lastErr error
	latency time.Duration
}

func (n *Node) connect(opts ...grpc.DialOption) error {
	var err error
	n.conn, err = grpc.Dial(n.addr, opts...)
	if err != nil {
		return fmt.Errorf("dialing node failed: %v", err)
	}

	n.GorumsQCClient = NewGorumsQCClient(n.conn)

	n.GorumsRPCClient = NewGorumsRPCClient(n.conn)

	n.WriteMulticastClient, err = n.GorumsRPCClient.WriteMulticast(context.Background())
	if err != nil {
		return fmt.Errorf("stream creation failed: %v", err)
	}

	return nil
}

func (n *Node) close() error {
	// TODO: Log error, mainly care about the connection error below.
	// We should log this error, but we currently don't have access to the
	// logger in the manager.
	_, _ = n.WriteMulticastClient.CloseAndRecv()

	if err := n.conn.Close(); err != nil {
		return fmt.Errorf("conn close error: %v", err)
	}
	return nil
}

/* 'gorums' plugin for protoc-gen-go - generated from: qspec_tmpl */

// QuorumSpec is the interface that wraps every quorum function.
type QuorumSpec interface {
	// GorumsQCReadQCQF is the quorum function for the GorumsQCReadQC
	// quorum call method.
	GorumsQCReadQCQF(replies []*Reply) (*Reply, bool)

	// GorumsRPCReadQCQF is the quorum function for the GorumsRPCReadQC
	// quorum call method.
	GorumsRPCReadQCQF(replies []*Reply) (*Reply, bool)

	// ReadCorrectableQF is the quorum function for the ReadCorrectable
	// correctable quorum call method.
	ReadCorrectableQF(replies []*Reply) (*Reply, int, bool)

	// ReadCorrectablePrelimCorrectablePrelimQF is the quorum function for the ReadCorrectablePrelim
	// correctable prelim quourm call method.
	ReadCorrectablePrelimCorrectablePrelimQF(replies []*Reply) (*Reply, int, bool)

	// ReadQCCustomReturnQF is the quorum function for the ReadQCCustomReturn
	// quorum call method.
	ReadQCCustomReturnQF(replies []*Reply) (*Reply, bool)

	// ReadQCFutureQF is the quorum function for the ReadQCFuture
	// quorum call method.
	ReadQCFutureQF(replies []*Reply) (*Reply, bool)

	// WriteQCPerNodeQF is the quorum function for the WriteQCPerNode
	// quorum call method.
	WriteQCPerNodeQF(replies []*WriteResp) (*WriteResp, bool)

	// WriteQCWithReqQF is the quorum function for the WriteQCWithReq
	// quorum call method.
	WriteQCWithReqQF(req *Reply, replies []*WriteResp) (*WriteResp, bool)
}

/* Static resources */

/* config.go */

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	id    uint32
	nodes []*Node
	n     int
	mgr   *Manager
	qspec QuorumSpec
}

// ID reports the identifier for the configuration.
func (c *Configuration) ID() uint32 {
	return c.id
}

// NodeIDs returns a slice containing the local ids of all the nodes in the
// configuration. IDs are returned in the same order as they were provided in
// the creation of the Configuration.
func (c *Configuration) NodeIDs() []uint32 {
	ids := make([]uint32, len(c.nodes))
	for i, node := range c.nodes {
		ids[i] = node.ID()
	}
	return ids
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Configuration.
func (c *Configuration) Nodes() []*Node {
	return c.nodes
}

// Size returns the number of nodes in the configuration.
func (c *Configuration) Size() int {
	return c.n
}

func (c *Configuration) String() string {
	return fmt.Sprintf("configuration %d", c.id)
}

func (c *Configuration) tstring() string {
	return fmt.Sprintf("config-%d", c.id)
}

// Equal returns a boolean reporting whether a and b represents the same
// configuration.
func Equal(a, b *Configuration) bool { return a.id == b.id }

// NewTestConfiguration returns a new configuration with quorum size q and
// node size n. No other fields are set. Configurations returned from this
// constructor should only be used when testing quorum functions.
func NewTestConfiguration(q, n int) *Configuration {
	return &Configuration{
		nodes: make([]*Node, n),
	}
}

/* errors.go */

// A NodeNotFoundError reports that a specified node could not be found.
type NodeNotFoundError uint32

func (e NodeNotFoundError) Error() string {
	return fmt.Sprintf("node not found: %d", e)
}

// A ConfigNotFoundError reports that a specified configuration could not be
// found.
type ConfigNotFoundError uint32

func (e ConfigNotFoundError) Error() string {
	return fmt.Sprintf("configuration not found: %d", e)
}

// An IllegalConfigError reports that a specified configuration could not be
// created.
type IllegalConfigError string

func (e IllegalConfigError) Error() string {
	return "illegal configuration: " + string(e)
}

// ManagerCreationError returns an error reporting that a Manager could not be
// created due to err.
func ManagerCreationError(err error) error {
	return fmt.Errorf("could not create manager: %s", err.Error())
}

// A QuorumCallError is used to report that a quorum call failed.
type QuorumCallError struct {
	Reason               string
	ErrCount, ReplyCount int
}

func (e QuorumCallError) Error() string {
	return fmt.Sprintf(
		"quorum call error: %s (errors: %d, replies: %d)",
		e.Reason, e.ErrCount, e.ReplyCount,
	)
}

/* level.go */

// LevelNotSet is the zero value level used to indicate that no level (and
// thereby no reply) has been set for a correctable quorum call.
const LevelNotSet = -1

/* mgr.go */

// Manager manages a pool of node configurations on which quorum remote
// procedure calls can be made.
type Manager struct {
	sync.Mutex
	nodes    []*Node
	lookup   map[uint32]*Node
	configs  map[uint32]*Configuration
	eventLog trace.EventLog

	closeOnce sync.Once
	logger    *log.Logger
	opts      managerOptions
}

// NewManager attempts to connect to the given set of node addresses and if
// successful returns a new Manager containing connections to those nodes.
func NewManager(nodeAddrs []string, opts ...ManagerOption) (*Manager, error) {
	if len(nodeAddrs) == 0 {
		return nil, fmt.Errorf("could not create manager: no nodes provided")
	}

	m := &Manager{
		lookup:  make(map[uint32]*Node),
		configs: make(map[uint32]*Configuration),
	}

	for _, opt := range opts {
		opt(&m.opts)
	}

	for _, naddr := range nodeAddrs {
		node, err2 := m.createNode(naddr)
		if err2 != nil {
			return nil, ManagerCreationError(err2)
		}
		m.lookup[node.id] = node
		m.nodes = append(m.nodes, node)
	}

	if m.opts.trace {
		title := strings.Join(nodeAddrs, ",")
		m.eventLog = trace.NewEventLog("gorums.Manager", title)
	}

	err := m.connectAll()
	if err != nil {
		return nil, ManagerCreationError(err)
	}

	if m.opts.logger != nil {
		m.logger = m.opts.logger
	}

	if m.eventLog != nil {
		m.eventLog.Printf("ready")
	}

	return m, nil
}

func (m *Manager) createNode(addr string) (*Node, error) {
	m.Lock()
	defer m.Unlock()

	tcpAddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		return nil, fmt.Errorf("create node %s error: %v", addr, err)
	}

	h := fnv.New32a()
	_, _ = h.Write([]byte(tcpAddr.String()))
	id := h.Sum32()

	if _, found := m.lookup[id]; found {
		return nil, fmt.Errorf("create node %s error: node already exists", addr)
	}

	node := &Node{
		id:      id,
		addr:    tcpAddr.String(),
		latency: -1 * time.Second,
	}

	return node, nil
}

func (m *Manager) connectAll() error {
	if m.opts.noConnect {
		return nil
	}

	if m.eventLog != nil {
		m.eventLog.Printf("connecting")
	}

	for _, node := range m.nodes {
		err := node.connect(m.opts.grpcDialOpts...)
		if err != nil {
			if m.eventLog != nil {
				m.eventLog.Errorf("connect failed, error connecting to node %s, error: %v", node.addr, err)
			}
			return fmt.Errorf("connect node %s error: %v", node.addr, err)
		}
	}
	return nil
}

func (m *Manager) closeNodeConns() {
	for _, node := range m.nodes {
		err := node.close()
		if err == nil {
			continue
		}
		if m.logger != nil {
			m.logger.Printf("node %d: error closing: %v", node.id, err)
		}
	}
}

// Close closes all node connections and any client streams.
func (m *Manager) Close() {
	m.closeOnce.Do(func() {
		if m.eventLog != nil {
			m.eventLog.Printf("closing")
		}
		m.closeNodeConns()
	})
}

// NodeIDs returns the identifier of each available node. IDs are returned in
// the same order as they were provided in the creation of the Manager.
func (m *Manager) NodeIDs() []uint32 {
	m.Lock()
	defer m.Unlock()
	ids := make([]uint32, 0, len(m.nodes))
	for _, node := range m.nodes {
		ids = append(ids, node.ID())
	}
	return ids
}

// Node returns the node with the given identifier if present.
func (m *Manager) Node(id uint32) (node *Node, found bool) {
	m.Lock()
	defer m.Unlock()
	node, found = m.lookup[id]
	return node, found
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
func (m *Manager) Nodes() []*Node {
	m.Lock()
	defer m.Unlock()
	return m.nodes
}

// ConfigurationIDs returns the identifier of each available
// configuration.
func (m *Manager) ConfigurationIDs() []uint32 {
	m.Lock()
	defer m.Unlock()
	ids := make([]uint32, 0, len(m.configs))
	for id := range m.configs {
		ids = append(ids, id)
	}
	return ids
}

// Configuration returns the configuration with the given global
// identifier if present.
func (m *Manager) Configuration(id uint32) (config *Configuration, found bool) {
	m.Lock()
	defer m.Unlock()
	config, found = m.configs[id]
	return config, found
}

// Configurations returns a slice of each available configuration.
func (m *Manager) Configurations() []*Configuration {
	m.Lock()
	defer m.Unlock()
	configs := make([]*Configuration, 0, len(m.configs))
	for _, conf := range m.configs {
		configs = append(configs, conf)
	}
	return configs
}

// Size returns the number of nodes and configurations in the Manager.
func (m *Manager) Size() (nodes, configs int) {
	m.Lock()
	defer m.Unlock()
	return len(m.nodes), len(m.configs)
}

// AddNode attempts to dial to the provide node address. The node is
// added to the Manager's pool of nodes if a connection was established.
func (m *Manager) AddNode(addr string) error {
	panic("not implemented")
}

// NewConfiguration returns a new configuration given quorum specification and
// a timeout.
func (m *Manager) NewConfiguration(ids []uint32, qspec QuorumSpec) (*Configuration, error) {
	m.Lock()
	defer m.Unlock()

	if len(ids) == 0 {
		return nil, IllegalConfigError("need at least one node")
	}

	var cnodes []*Node
	for _, nid := range ids {
		node, found := m.lookup[nid]
		if !found {
			return nil, NodeNotFoundError(nid)
		}
		cnodes = append(cnodes, node)
	}

	// Node ids are sorted ensure a globally consistent configuration id.
	sort.Sort(idSlice(ids))

	h := fnv.New32a()
	for _, id := range ids {
		binary.Write(h, binary.LittleEndian, id)
	}
	cid := h.Sum32()

	conf, found := m.configs[cid]
	if found {
		return conf, nil
	}

	c := &Configuration{
		id:    cid,
		nodes: cnodes,
		n:     len(cnodes),
		mgr:   m,
		qspec: qspec,
	}
	m.configs[cid] = c

	return c, nil
}

type idSlice []uint32

func (p idSlice) Len() int           { return len(p) }
func (p idSlice) Less(i, j int) bool { return p[i] < p[j] }
func (p idSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }

/* node_func.go */

// ID returns the ID of m.
func (n *Node) ID() uint32 {
	return n.id
}

// Address returns network address of m.
func (n *Node) Address() string {
	return n.addr
}

func (n *Node) String() string {
	n.Lock()
	defer n.Unlock()
	return fmt.Sprintf(
		"node %d | addr: %s | latency: %v",
		n.id, n.addr, n.latency,
	)
}

func (n *Node) setLastErr(err error) {
	n.Lock()
	defer n.Unlock()
	n.lastErr = err
}

// LastErr returns the last error encountered (if any) when invoking a remote
// procedure call on this node.
func (n *Node) LastErr() error {
	n.Lock()
	defer n.Unlock()
	return n.lastErr
}

func (n *Node) setLatency(lat time.Duration) {
	n.Lock()
	defer n.Unlock()
	n.latency = lat
}

// Latency returns the latency of the last successful remote procedure call
// made to this node.
func (n *Node) Latency() time.Duration {
	n.Lock()
	defer n.Unlock()
	return n.latency
}

type lessFunc func(n1, n2 *Node) bool

// MultiSorter implements the Sort interface, sorting the nodes within.
type MultiSorter struct {
	nodes []*Node
	less  []lessFunc
}

// Sort sorts the argument slice according to the less functions passed to
// OrderedBy.
func (ms *MultiSorter) Sort(nodes []*Node) {
	ms.nodes = nodes
	sort.Sort(ms)
}

// OrderedBy returns a Sorter that sorts using the less functions, in order.
// Call its Sort method to sort the data.
func OrderedBy(less ...lessFunc) *MultiSorter {
	return &MultiSorter{
		less: less,
	}
}

// Len is part of sort.Interface.
func (ms *MultiSorter) Len() int {
	return len(ms.nodes)
}

// Swap is part of sort.Interface.
func (ms *MultiSorter) Swap(i, j int) {
	ms.nodes[i], ms.nodes[j] = ms.nodes[j], ms.nodes[i]
}

// Less is part of sort.Interface. It is implemented by looping along the
// less functions until it finds a comparison that is either Less or
// !Less. Note that it can call the less functions twice per call. We
// could change the functions to return -1, 0, 1 and reduce the
// number of calls for greater efficiency: an exercise for the reader.
func (ms *MultiSorter) Less(i, j int) bool {
	p, q := ms.nodes[i], ms.nodes[j]
	// Try all but the last comparison.
	var k int
	for k = 0; k < len(ms.less)-1; k++ {
		less := ms.less[k]
		switch {
		case less(p, q):
			// p < q, so we have a decision.
			return true
		case less(q, p):
			// p > q, so we have a decision.
			return false
		}
		// p == q; try the next comparison.
	}
	// All comparisons to here said "equal", so just return whatever
	// the final comparison reports.
	return ms.less[k](p, q)
}

// ID sorts nodes by their identifier in increasing order.
var ID = func(n1, n2 *Node) bool {
	return n1.id < n2.id
}

// Latency sorts nodes by latency in increasing order. Latencies less then
// zero (sentinel value) are considered greater than any positive latency.
var Latency = func(n1, n2 *Node) bool {
	if n1.latency < 0 {
		return false
	}
	return n1.latency < n2.latency

}

// Error sorts nodes by their LastErr() status in increasing order. A
// node with LastErr() != nil is larger than a node with LastErr() == nil.
var Error = func(n1, n2 *Node) bool {
	if n1.lastErr != nil && n2.lastErr == nil {
		return false
	}
	return true
}

/* opts.go */

type managerOptions struct {
	grpcDialOpts []grpc.DialOption
	logger       *log.Logger
	noConnect    bool
	trace        bool
}

// ManagerOption provides a way to set different options on a new Manager.
type ManagerOption func(*managerOptions)

// WithGrpcDialOptions returns a ManagerOption which sets any gRPC dial options
// the Manager should use when initially connecting to each node in its
// pool.
func WithGrpcDialOptions(opts ...grpc.DialOption) ManagerOption {
	return func(o *managerOptions) {
		o.grpcDialOpts = opts
	}
}

// WithLogger returns a ManagerOption which sets an optional error logger for
// the Manager.
func WithLogger(logger *log.Logger) ManagerOption {
	return func(o *managerOptions) {
		o.logger = logger
	}
}

// WithNoConnect returns a ManagerOption which instructs the Manager not to
// connect to any of its nodes. Mainly used for testing purposes.
func WithNoConnect() ManagerOption {
	return func(o *managerOptions) {
		o.noConnect = true
	}
}

// WithTracing controls whether to trace qourum calls for this Manager instance
// using the golang.org/x/net/trace package. Tracing is currently only supported
// for regular quorum calls.
func WithTracing() ManagerOption {
	return func(o *managerOptions) {
		o.trace = true
	}
}

/* trace.go */

type traceInfo struct {
	tr        trace.Trace
	firstLine firstLine
}

type firstLine struct {
	deadline time.Duration
	cid      uint32
}

func (f *firstLine) String() string {
	var line bytes.Buffer
	io.WriteString(&line, "QC: to config")
	fmt.Fprintf(&line, "%v deadline:", f.cid)
	if f.deadline != 0 {
		fmt.Fprint(&line, f.deadline)
	} else {
		io.WriteString(&line, "none")
	}
	return line.String()
}

type payload struct {
	sent bool
	id   uint32
	msg  interface{}
}

func (p payload) String() string {
	if p.sent {
		return fmt.Sprintf("sent: %v", p.msg)
	}
	return fmt.Sprintf("recv from %d: %v", p.id, p.msg)
}

type qcresult struct {
	ids   []uint32
	reply interface{}
	err   error
}

func (q qcresult) String() string {
	var out bytes.Buffer
	io.WriteString(&out, "recv QC reply: ")
	fmt.Fprintf(&out, "ids: %v, ", q.ids)
	fmt.Fprintf(&out, "reply: %v ", q.reply)
	if q.err != nil {
		fmt.Fprintf(&out, ", error: %v", q.err)
	}
	return out.String()
}

/* util.go */

func appendIfNotPresent(set []uint32, x uint32) []uint32 {
	for _, y := range set {
		if y == x {
			return set
		}
	}
	return append(set, x)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GorumsQC service

type GorumsQCClient interface {
	// Read is a plain gRPC call
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadQC is a synchronous quorum call
	ReadQC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
}

type gorumsQCClient struct {
	cc *grpc.ClientConn
}

func NewGorumsQCClient(cc *grpc.ClientConn) GorumsQCClient {
	return &gorumsQCClient{cc}
}

func (c *gorumsQCClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsQC/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsQCClient) ReadQC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsQC/ReadQC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GorumsQC service

type GorumsQCServer interface {
	// Read is a plain gRPC call
	Read(context.Context, *ReadReq) (*Reply, error)
	// ReadQC is a synchronous quorum call
	ReadQC(context.Context, *ReadReq) (*Reply, error)
}

func RegisterGorumsQCServer(s *grpc.Server, srv GorumsQCServer) {
	s.RegisterService(&_GorumsQC_serviceDesc, srv)
}

func _GorumsQC_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsQCServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsQC/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsQCServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsQC_ReadQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsQCServer).ReadQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsQC/ReadQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsQCServer).ReadQC(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GorumsQC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.GorumsQC",
	HandlerType: (*GorumsQCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _GorumsQC_Read_Handler,
		},
		{
			MethodName: "ReadQC",
			Handler:    _GorumsQC_ReadQC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/gorums_rpc_golden/gorums_rpc.proto",
}

// Client API for GorumsRPC service

type GorumsRPCClient interface {
	// Read is a plain gRPC call
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadQC is a synchronous quorum call
	ReadQC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadQCCustomReturn is a synchronous quorum call with a custom return type
	ReadQCCustomReturn(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadQCFuture is an asynchronous quorum call that returns a future object for retrieving results
	ReadQCFuture(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadCorrectable is an asynchronous correctable quorum call that returns a correctable object for retrieving results
	ReadCorrectable(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// ReadCorrectablePrelim is an asynchronous correctable preliminary quorum call that returns a correctable object for retrieving results
	ReadCorrectablePrelim(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error)
	// WriteMulticast is an asynchronous multicast to all nodes in a configuration; it doesn't collect any replies
	WriteMulticast(ctx context.Context, opts ...grpc.CallOption) (GorumsRPC_WriteMulticastClient, error)
	// WriteQCWithReq is a synchronous quorum call with the request parameter passed to the quorum function
	WriteQCWithReq(ctx context.Context, in *Reply, opts ...grpc.CallOption) (*WriteResp, error)
	// WriteQCPerNode is a synchronous quorum call, where, for each node, a function is called to determine the argument to be sent to that node
	WriteQCPerNode(ctx context.Context, in *Reply, opts ...grpc.CallOption) (*WriteResp, error)
}

type gorumsRPCClient struct {
	cc *grpc.ClientConn
}

func NewGorumsRPCClient(cc *grpc.ClientConn) GorumsRPCClient {
	return &gorumsRPCClient{cc}
}

func (c *gorumsRPCClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) ReadQC(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/ReadQC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) ReadQCCustomReturn(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/ReadQCCustomReturn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) ReadQCFuture(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/ReadQCFuture", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) ReadCorrectable(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/ReadCorrectable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) ReadCorrectablePrelim(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/ReadCorrectablePrelim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) WriteMulticast(ctx context.Context, opts ...grpc.CallOption) (GorumsRPC_WriteMulticastClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GorumsRPC_serviceDesc.Streams[0], c.cc, "/dev.GorumsRPC/WriteMulticast", opts...)
	if err != nil {
		return nil, err
	}
	x := &gorumsRPCWriteMulticastClient{stream}
	return x, nil
}

type GorumsRPC_WriteMulticastClient interface {
	Send(*Reply) error
	CloseAndRecv() (*Nothing, error)
	grpc.ClientStream
}

type gorumsRPCWriteMulticastClient struct {
	grpc.ClientStream
}

func (x *gorumsRPCWriteMulticastClient) Send(m *Reply) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gorumsRPCWriteMulticastClient) CloseAndRecv() (*Nothing, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Nothing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gorumsRPCClient) WriteQCWithReq(ctx context.Context, in *Reply, opts ...grpc.CallOption) (*WriteResp, error) {
	out := new(WriteResp)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/WriteQCWithReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsRPCClient) WriteQCPerNode(ctx context.Context, in *Reply, opts ...grpc.CallOption) (*WriteResp, error) {
	out := new(WriteResp)
	err := grpc.Invoke(ctx, "/dev.GorumsRPC/WriteQCPerNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GorumsRPC service

type GorumsRPCServer interface {
	// Read is a plain gRPC call
	Read(context.Context, *ReadReq) (*Reply, error)
	// ReadQC is a synchronous quorum call
	ReadQC(context.Context, *ReadReq) (*Reply, error)
	// ReadQCCustomReturn is a synchronous quorum call with a custom return type
	ReadQCCustomReturn(context.Context, *ReadReq) (*Reply, error)
	// ReadQCFuture is an asynchronous quorum call that returns a future object for retrieving results
	ReadQCFuture(context.Context, *ReadReq) (*Reply, error)
	// ReadCorrectable is an asynchronous correctable quorum call that returns a correctable object for retrieving results
	ReadCorrectable(context.Context, *ReadReq) (*Reply, error)
	// ReadCorrectablePrelim is an asynchronous correctable preliminary quorum call that returns a correctable object for retrieving results
	ReadCorrectablePrelim(context.Context, *ReadReq) (*Reply, error)
	// WriteMulticast is an asynchronous multicast to all nodes in a configuration; it doesn't collect any replies
	WriteMulticast(GorumsRPC_WriteMulticastServer) error
	// WriteQCWithReq is a synchronous quorum call with the request parameter passed to the quorum function
	WriteQCWithReq(context.Context, *Reply) (*WriteResp, error)
	// WriteQCPerNode is a synchronous quorum call, where, for each node, a function is called to determine the argument to be sent to that node
	WriteQCPerNode(context.Context, *Reply) (*WriteResp, error)
}

func RegisterGorumsRPCServer(s *grpc.Server, srv GorumsRPCServer) {
	s.RegisterService(&_GorumsRPC_serviceDesc, srv)
}

func _GorumsRPC_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_ReadQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).ReadQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/ReadQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).ReadQC(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_ReadQCCustomReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).ReadQCCustomReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/ReadQCCustomReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).ReadQCCustomReturn(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_ReadQCFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).ReadQCFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/ReadQCFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).ReadQCFuture(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_ReadCorrectable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).ReadCorrectable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/ReadCorrectable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).ReadCorrectable(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_ReadCorrectablePrelim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).ReadCorrectablePrelim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/ReadCorrectablePrelim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).ReadCorrectablePrelim(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_WriteMulticast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GorumsRPCServer).WriteMulticast(&gorumsRPCWriteMulticastServer{stream})
}

type GorumsRPC_WriteMulticastServer interface {
	SendAndClose(*Nothing) error
	Recv() (*Reply, error)
	grpc.ServerStream
}

type gorumsRPCWriteMulticastServer struct {
	grpc.ServerStream
}

func (x *gorumsRPCWriteMulticastServer) SendAndClose(m *Nothing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gorumsRPCWriteMulticastServer) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GorumsRPC_WriteQCWithReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).WriteQCWithReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/WriteQCWithReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).WriteQCWithReq(ctx, req.(*Reply))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsRPC_WriteQCPerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsRPCServer).WriteQCPerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.GorumsRPC/WriteQCPerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsRPCServer).WriteQCPerNode(ctx, req.(*Reply))
	}
	return interceptor(ctx, in, info, handler)
}

var _GorumsRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.GorumsRPC",
	HandlerType: (*GorumsRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _GorumsRPC_Read_Handler,
		},
		{
			MethodName: "ReadQC",
			Handler:    _GorumsRPC_ReadQC_Handler,
		},
		{
			MethodName: "ReadQCCustomReturn",
			Handler:    _GorumsRPC_ReadQCCustomReturn_Handler,
		},
		{
			MethodName: "ReadQCFuture",
			Handler:    _GorumsRPC_ReadQCFuture_Handler,
		},
		{
			MethodName: "ReadCorrectable",
			Handler:    _GorumsRPC_ReadCorrectable_Handler,
		},
		{
			MethodName: "ReadCorrectablePrelim",
			Handler:    _GorumsRPC_ReadCorrectablePrelim_Handler,
		},
		{
			MethodName: "WriteQCWithReq",
			Handler:    _GorumsRPC_WriteQCWithReq_Handler,
		},
		{
			MethodName: "WriteQCPerNode",
			Handler:    _GorumsRPC_WriteQCPerNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteMulticast",
			Handler:       _GorumsRPC_WriteMulticast_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "testdata/gorums_rpc_golden/gorums_rpc.proto",
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGorumsRpc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGorumsRpc(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *WriteResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.New {
		dAtA[i] = 0x8
		i++
		if m.New {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Nothing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nothing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64GorumsRpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32GorumsRpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGorumsRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Reply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGorumsRpc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGorumsRpc(uint64(m.Timestamp))
	}
	return n
}

func (m *WriteResp) Size() (n int) {
	var l int
	_ = l
	if m.New {
		n += 2
	}
	return n
}

func (m *ReadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Nothing) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovGorumsRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGorumsRpc(x uint64) (n int) {
	return sovGorumsRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reply{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WriteResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WriteResp{`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadReq{`,
		`}`,
	}, "")
	return s
}
func (this *Nothing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Nothing{`,
		`}`,
	}, "")
	return s
}
func valueToStringGorumsRpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGorumsRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGorumsRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGorumsRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGorumsRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGorumsRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGorumsRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGorumsRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGorumsRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.New = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGorumsRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGorumsRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGorumsRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGorumsRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGorumsRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nothing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGorumsRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nothing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nothing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGorumsRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGorumsRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGorumsRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGorumsRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGorumsRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGorumsRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGorumsRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGorumsRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGorumsRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGorumsRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGorumsRpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("testdata/gorums_rpc_golden/gorums_rpc.proto", fileDescriptorGorumsRpc)
}

var fileDescriptorGorumsRpc = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbf, 0x8b, 0xd4, 0x40,
	0x14, 0xc7, 0x33, 0xee, 0xde, 0xba, 0x79, 0x1c, 0xab, 0x0c, 0x0a, 0x61, 0xd1, 0xe1, 0x08, 0x16,
	0x0b, 0x4a, 0x0e, 0x57, 0xd0, 0x42, 0xb0, 0x30, 0xa0, 0x95, 0xcb, 0xee, 0x20, 0x9e, 0xdd, 0x91,
	0xdd, 0x3c, 0xb2, 0x81, 0xc9, 0x4e, 0x6e, 0x32, 0x73, 0x72, 0xdd, 0x95, 0x96, 0x57, 0x5a, 0x5a,
	0x5e, 0x69, 0xb3, 0xff, 0x80, 0x95, 0xe5, 0x95, 0xda, 0xdd, 0xc6, 0xc6, 0x52, 0xf0, 0x1f, 0x90,
	0x49, 0x82, 0x77, 0x5a, 0xc4, 0xe6, 0xaa, 0x79, 0x3f, 0xbe, 0x9f, 0xf7, 0x86, 0xf7, 0x1e, 0xdc,
	0xd7, 0x58, 0xe8, 0x38, 0xd2, 0xd1, 0x6e, 0x22, 0x95, 0xc9, 0x8a, 0x7d, 0x95, 0x2f, 0xf6, 0x13,
	0x29, 0x62, 0x5c, 0x5d, 0x8a, 0x04, 0xb9, 0x92, 0x5a, 0xd2, 0x4e, 0x8c, 0x87, 0xc3, 0x7b, 0x49,
	0xaa, 0x97, 0x66, 0x1e, 0x2c, 0x64, 0xb6, 0xab, 0x50, 0x44, 0xf3, 0x46, 0xd7, 0x3c, 0xb5, 0xd4,
	0x7f, 0x0a, 0x5b, 0x1c, 0x73, 0x71, 0x44, 0x6f, 0xc1, 0xd6, 0x9b, 0x48, 0x18, 0xf4, 0xc8, 0x0e,
	0x19, 0xb9, 0xbc, 0x76, 0xe8, 0x1d, 0x70, 0x5f, 0xa7, 0x19, 0x16, 0x3a, 0xca, 0x72, 0xef, 0xda,
	0x0e, 0x19, 0x75, 0xf8, 0x45, 0xc0, 0xbf, 0x0b, 0xee, 0x9e, 0x4a, 0x35, 0x72, 0x2c, 0x72, 0x7a,
	0x13, 0x3a, 0x13, 0x7c, 0x57, 0xe1, 0x7d, 0x6e, 0x4d, 0xdf, 0x85, 0xeb, 0x1c, 0xa3, 0x98, 0xe3,
	0x81, 0x35, 0x27, 0x52, 0x2f, 0xd3, 0x55, 0x32, 0x7e, 0x0b, 0xfd, 0x97, 0xd5, 0x0f, 0x66, 0x21,
	0xf5, 0xa1, 0x6b, 0x15, 0x74, 0x3b, 0x88, 0xf1, 0x30, 0x68, 0xc4, 0x43, 0x68, 0xbc, 0x5c, 0x1c,
	0xf9, 0x0e, 0x1d, 0x41, 0xcf, 0x26, 0x66, 0x61, 0x8b, 0xaa, 0x7b, 0xbc, 0xf6, 0xc8, 0xf8, 0x5b,
	0x07, 0xdc, 0xba, 0x34, 0x9f, 0x5e, 0x71, 0x6d, 0xfa, 0x0c, 0x68, 0xad, 0x0c, 0x4d, 0xa1, 0x65,
	0xc6, 0x51, 0x1b, 0xb5, 0x6a, 0xa1, 0x06, 0x96, 0xfa, 0xfc, 0xcb, 0xeb, 0x85, 0xf5, 0x78, 0x03,
	0xd8, 0xae, 0xf9, 0x17, 0x46, 0x1b, 0x85, 0x6d, 0xfd, 0x3e, 0xda, 0x7e, 0x0f, 0xe1, 0x86, 0x4d,
	0x86, 0x52, 0x29, 0x5c, 0xe8, 0x68, 0x2e, 0x5a, 0x91, 0xf7, 0x16, 0x79, 0x02, 0xb7, 0xff, 0x41,
	0xa6, 0x0a, 0x45, 0x9a, 0xb5, 0x81, 0x27, 0x16, 0x1c, 0xc3, 0xa0, 0x5a, 0xe3, 0x2b, 0x23, 0x74,
	0xba, 0x88, 0x0a, 0x4d, 0x2f, 0x69, 0x86, 0x35, 0xdd, 0x6c, 0xcf, 0xef, 0x7e, 0x58, 0x7b, 0x64,
	0x44, 0xe8, 0xe3, 0x86, 0x99, 0x85, 0x7b, 0xa9, 0x5e, 0x72, 0x3c, 0xf8, 0x8b, 0x19, 0x54, 0xf6,
	0x9f, 0xdb, 0xf0, 0xfb, 0x76, 0x1a, 0xa7, 0xb6, 0xd7, 0x05, 0x37, 0x45, 0x35, 0x91, 0x31, 0xfe,
	0x9f, 0xfb, 0xb4, 0xf6, 0xc8, 0xf3, 0x07, 0x67, 0x1b, 0xe6, 0x7c, 0xdd, 0x30, 0xe7, 0x7c, 0xc3,
	0xc8, 0x71, 0xc9, 0xc8, 0x69, 0xc9, 0xc8, 0x97, 0x92, 0x91, 0xb3, 0x92, 0x91, 0xf3, 0x92, 0x91,
	0x1f, 0x25, 0x73, 0x7e, 0x96, 0x8c, 0x9c, 0x7c, 0x67, 0xce, 0xbc, 0x57, 0x1d, 0xf7, 0xa3, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x26, 0x05, 0x8d, 0x81, 0x36, 0x03, 0x00, 0x00,
}
